{"version":3,"sources":["Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","href","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addEvent","newArray","toConsumableArray","state","events","push","id","length","lenght","time","title","location","description","setState","handleInputChange","inputName","value","nextValue","defineProperty","handleDelete","eventId","filter","e","toggleModal","modal","_this2","Fragment","mdbreact_esm","md","map","event","App_Event","key","onDelete","xl","color","rounded","onClick","xs","icon","fixed","isOpen","toggle","titleClass","name","label","hint","group","type","getValue","React","Component","Event","_this3","MySched","App_App","Components_Footer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.791a8527.chunk.js","sourcesContent":["import React from 'react'\n\nconst Footer = () => (\n    <div className=\"text-center\">\n        <p>Built with React MDB by <a href=\"https://www.koleenbp.com\">Koleen BP</a></p>\n    </div>\n)\n\nexport default Footer","import React from 'react'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport 'bootstrap-css-only/css/bootstrap.min.css'\nimport 'mdbreact/dist/css/mdb.css'\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody,\n  MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge,\n  MDBContainer, MDBRow, MDBCol } \nfrom 'mdbreact'\nimport Footer from './Components/Footer'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false,\n      events: [\n        {\n          id: 1,\n          time: \"10:00\",\n          title: \"Breakfast w/ G\",\n          location: 'San Juan',\n          description: 'Discuss Work loads'\n        },\n        {\n          id: 2,\n          time: \"12:00\",\n          title: \"Breakfast w/ Arina Marie\",\n          location: 'Greenhills',\n          description: 'Discuss Work loads'\n        },\n        {\n          id: 3,\n          time: \"09:00\",\n          title: \"Breakfast w/ Abella Danger\",\n          location: 'Cybergate 2',\n          description: 'Discuss Work loads'\n        }\n      ]\n    }\n  }\n\n  addEvent = () => {\n    const newArray = [...this.state.events]\n    newArray.push({\n      id: newArray.length ? newArray[newArray.lenght - 1].id + 1 : 1,\n      time: this.state.time,\n      title: this.state.title,\n      location: this.state.location,\n      description: this.state.description\n    })\n\n    this.setState({\n      events: newArray\n    })\n    this.setState({\n      time: \"\",\n      title: \"\",\n      location: \"\",\n      description: \"\"\n    })\n   }\n\n  handleInputChange = inputName => value => {\n    const nextValue = value\n    this.setState({\n      [inputName]: nextValue,\n    })\n  }    \n  \n  handleDelete = eventId => {\n    const events = this.state.events.filter(e => e.id !== eventId)\n    this.setState({\n      events\n    })\n  }\n  toggleModal = () => {\n    this.setState({\n      modal: !this.state.modal\n    })\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <MDBContainer>\n          <MDBRow>\n            <MDBCol md=\"9\" className=\"mb-r\">\n              <h2 className=\"text-uppercase my-3\">Today:</h2>\n              <div id=\"events\">\n                {this.state.events.map(event => (\n                  <Event\n                    key={event.id}\n                    id={event.id}\n                    time={event.time}\n                    title={event.title}\n                    location={event.location}\n                    description={event.description}\n                    onDelete={this.handleDelete}\n                  />\n                ))}\n              </div>\n              <MDBRow className=\"mb-4\">\n              <MDBCol xl=\"3\" md=\"6\" className=\"mx-auto text-center\">\n                  <MDBBtn color=\"info\" rounded onClick={this.toggleModal}>\n                  Add Event\n                  </MDBBtn>\n              </MDBCol>\n              </MDBRow>\n            </MDBCol>\n            <MDBCol md=\"3\">\n                  <h3 className=\"text-uppercase my-3\">Schedule</h3>\n                  <h6 className=\"my-3\">\n                  It is going to be busy that day. You have {\" \"}\n                  <b>{this.state.events.length} events</b> today\n                  </h6>\n                  <h1 className=\"my-3\">\n                    <MDBRow>\n                    <MDBCol xs=\"3\" className=\"text-center\">\n                      <MDBIcon icon=\"sun\" fixed />\n                    </MDBCol>\n                    <MDBCol xs=\"9\">Sunny</MDBCol>\n                    </MDBRow>\n                    <MDBRow>\n                    <MDBCol xs=\"3\" className=\"text-center\">\n                    <MDBIcon icon=\"termometer-three-quarters\" fixed/>\n                    </MDBCol>\n                    <MDBCol xs=\"9\">23C</MDBCol>\n                    </MDBRow>\n                  </h1>\n                  <p>Dont forget your glasses</p>\n            </MDBCol>\n          </MDBRow>\n        </MDBContainer>\n        <MDBModal isOpen={this.state.modal} toggle={this.toggleModal}>\n         <MDBModalHeader\n          className=\"text-center\"\n          titleClass=\"w-100 font-weight-bold\"\n          toggle={this.toggleModal}\n         >\n          Add New Event\n         </MDBModalHeader>\n          <MDBModalBody>\n            <form className=\"mx-3 grey-text\">\n            <MDBInput\n                name=\"time\"\n                label=\"Time\"\n                icon=\"clock\"\n                hint=\"Ex: 12:30AM\"\n                group\n                type=\"text\"\n                getValue={this.handleInputChange(\"time\")}\n            />\n            <MDBInput\n                name=\"title\"\n                label=\"Title\"\n                icon=\"edit\"\n                hint=\"Ex: Briefing\"\n                group\n                type=\"text\"\n                getValue={this.handleInputChange(\"title\")}\n              />\n              <MDBInput\n                name=\"location\"\n                label=\"Location (optional)\"\n                icon=\"map\"\n                group\n                type=\"text\"\n                getValue={this.handleInputChange(\"location\")}\n              />\n              <MDBInput\n                name=\"description\"\n                label=\"Description (optional)\"\n                icon=\"sticky-note\"\n                group\n                type=\"textarea\"\n                getValue={this.handleInputChange(\"description\")}\n              />\n            </form>\n          </MDBModalBody>\n\n          <MDBModalFooter className=\"justify-content-center\">\n          <MDBBtn\n            color=\"info\"\n            onClick={() => {\n              this.toggleModal()\n              this.addEvent()\n            }}\n          >\n            Add\n          </MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </React.Fragment>\n    )\n  }\n}\n\nclass Event extends React.Component {\n  render() {\n    return(\n      <React.Fragment>\n        <div className=\"media mt-1\">\n          <h3 className=\"h3-responsive font-weight-bold mr-3\">\n            {this.props.time}\n          </h3>\n          <div className=\"media-body mb-3 mb-lg-3\">\n            <MDBBadge\n              color=\"danger\"\n              className=\"ml-2 float-right\"\n              onClick={() => {\n                this.props.onDelete(this.props.id)\n              }}\n            > -\n          </MDBBadge>\n            <h6 className=\"mt-0 font-weight-bold\"> {this.props.title}</h6>{\" \"}\n            {\n              this.props.location && (\n                <React.Fragment>\n                  <p className=\"font-smaller mb-0\">\n                    <MDBIcon icon=\"location-arrow\" /> {this.props.location}\n                  </p>\n                </React.Fragment>\n              )\n            }\n          </div>\n        </div>\n        {\n          this.props.description &&\n          (<p className=\"p-2 mb-4 blue-grey lighten-5 blue-grey lighten-5\">\n            {this.props.description}\n          </p>)\n        }\n      </React.Fragment>\n    )\n  }\n}\n\nconst MySched = () => (\n  <React.Fragment>\n    <div>\n      <Event />\n      <App />\n    </div>\n    <Footer />\n  </React.Fragment>\n)\nexport default MySched","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MySched from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MySched />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}